from django.db import models


class Inventre(models.Model):
    inventre_guid = models.CharField(db_column='INVENTRE_GUID', primary_key=True, max_length=36)
    recno5 = models.IntegerField(db_column='RECNO5')
    tree_id = models.CharField(db_column='TREE_ID', max_length=5, unique=True)
    parent_id = models.CharField(db_column='PARENT_ID', max_length=5)
    tree_flags = models.CharField(db_column='TREE_FLAGS', max_length=9)
    tree_descr = models.CharField(db_column='TREE_DESCR', max_length=35)
    sub_only = models.BooleanField(db_column='SUB_ONLY')
    tree_open = models.CharField(db_column='TREE_OPEN', max_length=2)
    tree_close = models.CharField(db_column='TREE_CLOSE', max_length=2)
    crid_type = models.CharField(db_column='CRID_TYPE', max_length=10)
    crid_value = models.CharField(db_column='CRID_VALUE', max_length=90)
    color_by = models.DecimalField(db_column='COLOR_BY', max_digits=1, decimal_places=0)
    pr_newitem = models.BooleanField(db_column='PR_NEWITEM')
    pr_newfldr = models.BooleanField(db_column='PR_NEWFLDR')
    tree_path = models.CharField(db_column='TREE_PATH', max_length=60)
    autoid = models.CharField(db_column='AUTOID', max_length=16)
    origin_child_tree_id = models.ForeignObject('Inventre', models.SET_NULL, from_fields=['parent_id'],
                                                to_fields=['tree_id'], related_name='origin_parent_tree_id')

    class Meta:
        managed = False
        db_table = 'INVENTRE'


class Inventry(models.Model):
    inventry_guid = models.CharField(db_column='INVENTRY_GUID', primary_key=True, max_length=36)
    recno5 = models.IntegerField(db_column='RECNO5')
    id = models.CharField(db_column='ID', max_length=24, unique=True)
    tree_id = models.CharField(db_column='TREE_ID', max_length=5)
    upc = models.CharField(db_column='UPC', max_length=25)
    upc2 = models.CharField(db_column='UPC2', max_length=25)
    upc3 = models.CharField(db_column='UPC3', max_length=25)
    type = models.CharField(db_column='TYPE', max_length=20)
    c_type = models.DecimalField(db_column='C_TYPE', max_digits=2, decimal_places=0)
    descr_1 = models.CharField(db_column='DESCR_1', max_length=80)
    descr_1prn = models.BooleanField(db_column='DESCR_1PRN')
    descr_1prp = models.BooleanField(db_column='DESCR_1PRP')
    descr_2 = models.CharField(db_column='DESCR_2', max_length=80)
    descr_2prn = models.BooleanField(db_column='DESCR_2PRN')
    descr_2prp = models.BooleanField(db_column='DESCR_2PRP')
    descr_3 = models.TextField(db_column='DESCR_3', blank=True, null=True)
    descr_3prn = models.BooleanField(db_column='DESCR_3PRN')
    descr_3prp = models.BooleanField(db_column='DESCR_3PRP')
    markup = models.CharField(db_column='MARKUP', max_length=60)
    markup_id = models.CharField(db_column='MARKUP_ID', max_length=10)
    base = models.DecimalField(db_column='BASE', max_digits=14, decimal_places=2)
    cost = models.DecimalField(db_column='COST', max_digits=14, decimal_places=2)
    comp_flatv = models.BooleanField(db_column='COMP_FLATV')
    tax_group = models.CharField(db_column='TAX_GROUP', max_length=20)
    usetaxelig = models.BooleanField(db_column='USETAXELIG')
    isshortcut = models.BooleanField(db_column='ISSHORTCUT')
    weight = models.DecimalField(db_column='WEIGHT', max_digits=14, decimal_places=2)
    date = models.DateField(db_column='DATE', blank=True, null=True)
    quan2order = models.DecimalField(db_column='QUAN2ORDER', max_digits=14, decimal_places=2)
    count = models.DecimalField(db_column='COUNT', max_digits=22, decimal_places=6)
    location = models.CharField(db_column='LOCATION', max_length=200)
    min_inven = models.DecimalField(db_column='MIN_INVEN', max_digits=14, decimal_places=2)
    max_inven = models.DecimalField(db_column='MAX_INVEN', max_digits=14, decimal_places=2)
    order_amt = models.DecimalField(db_column='ORDER_AMT', max_digits=14, decimal_places=2)
    pri_vendor = models.CharField(db_column='PRI_VENDOR', max_length=10)
    pur_o = models.DecimalField(db_column='PUR_O', max_digits=22, decimal_places=6)
    pur_s = models.DecimalField(db_column='PUR_S', max_digits=22, decimal_places=6)
    sales_o = models.DecimalField(db_column='SALES_O', max_digits=22, decimal_places=6)
    sales_s = models.DecimalField(db_column='SALES_S', max_digits=22, decimal_places=6)
    m_in_o = models.DecimalField(db_column='M_IN_O', max_digits=22, decimal_places=6)
    m_in_s = models.DecimalField(db_column='M_IN_S', max_digits=22, decimal_places=6)
    m_out_o = models.DecimalField(db_column='M_OUT_O', max_digits=22, decimal_places=6)
    m_out_s = models.DecimalField(db_column='M_OUT_S', max_digits=22, decimal_places=6)
    job_out_o = models.DecimalField(db_column='JOB_OUT_O', max_digits=22, decimal_places=6)
    job_out_s = models.DecimalField(db_column='JOB_OUT_S', max_digits=22, decimal_places=6)
    av_in_off = models.DecimalField(db_column='AV_IN_OFF', max_digits=22, decimal_places=6)
    av_out_off = models.DecimalField(db_column='AV_OUT_OFF', max_digits=22, decimal_places=6)
    oh_in_off = models.DecimalField(db_column='OH_IN_OFF', max_digits=22, decimal_places=6)
    oh_out_off = models.DecimalField(db_column='OH_OUT_OFF', max_digits=22, decimal_places=6)
    no_in_off = models.DecimalField(db_column='NO_IN_OFF', max_digits=22, decimal_places=6)
    no_out_off = models.DecimalField(db_column='NO_OUT_OFF', max_digits=22, decimal_places=6)
    each_unit = models.CharField(db_column='EACH_UNIT', max_length=10)
    int_quan = models.BooleanField(db_column='INT_QUAN')
    def_unit = models.CharField(db_column='DEF_UNIT', max_length=10)
    last_chk_u = models.CharField(db_column='LAST_CHK_U', max_length=20)
    last_chk_d = models.DateField(db_column='LAST_CHK_D', blank=True, null=True)
    last_chk_t = models.CharField(db_column='LAST_CHK_T', max_length=8)
    auto_cost = models.BooleanField(db_column='AUTO_COST')
    memo = models.TextField(db_column='MEMO', blank=True, null=True)
    mfg = models.CharField(db_column='MFG', max_length=10)
    mfg_part = models.CharField(db_column='MFG_PART', max_length=24)
    web = models.TextField(db_column='WEB', blank=True, null=True)
    est_hours = models.DecimalField(db_column='EST_HOURS', max_digits=14, decimal_places=2)
    def_work = models.CharField(db_column='DEF_WORK', max_length=10)
    inactive = models.BooleanField(db_column='INACTIVE')
    perc_adj = models.DecimalField(db_column='PERC_ADJ', max_digits=9, decimal_places=2)
    perc_adj_c = models.DecimalField(db_column='PERC_ADJ_C', max_digits=1, decimal_places=0)
    perc_adj_n = models.DecimalField(db_column='PERC_ADJ_N', max_digits=2, decimal_places=0)
    pur_memo = models.TextField(db_column='PUR_MEMO', blank=True, null=True)
    sale_class = models.CharField(db_column='SALE_CLASS', max_length=15)
    updatecost = models.BooleanField(db_column='UPDATECOST')
    updvencost = models.BooleanField(db_column='UPDVENCOST')
    ins_acc = models.DecimalField(db_column='INS_ACC', max_digits=1, decimal_places=0)
    returndays = models.CharField(db_column='RETURNDAYS', max_length=16)
    trade_in = models.BooleanField(db_column='TRADE_IN')
    lotselopt = models.CharField(db_column='LOTSELOPT', max_length=10)
    show_lots = models.BooleanField(db_column='SHOW_LOTS')
    tree_path = models.CharField(db_column='TREE_PATH', max_length=60)
    int_note = models.TextField(db_column='INT_NOTE', blank=True, null=True)
    externalid = models.CharField(db_column='EXTERNALID', max_length=50)
    sale_acc = models.CharField(db_column='SALE_ACC', max_length=9)
    use_pl_gl = models.BooleanField(db_column='USE_PL_GL')
    pur_acc = models.CharField(db_column='PUR_ACC', max_length=9)
    adjust = models.CharField(db_column='ADJUST', max_length=5)
    usetax_acc = models.CharField(db_column='USETAX_ACC', max_length=5)
    asset = models.CharField(db_column='ASSET', max_length=9)
    use_itemgl = models.BooleanField(db_column='USE_ITEMGL')
    mfg_cost = models.CharField(db_column='MFG_COST', max_length=9)
    trade_acc = models.CharField(db_column='TRADE_ACC', max_length=9)
    autoid = models.CharField(db_column='AUTOID', max_length=16)
    weigh_it = models.BooleanField(db_column='WEIGH_IT')
    purc_meth = models.DecimalField(db_column='PURC_METH', max_digits=1, decimal_places=0)
    pur_ssed = models.BooleanField(db_column='PUR_SSED')
    sale_level = models.DecimalField(db_column='SALE_LEVEL', max_digits=6, decimal_places=1)
    sale_lev_c = models.BooleanField(db_column='SALE_LEV_C')
    a_pur_type = models.DecimalField(db_column='A_PUR_TYPE', max_digits=1, decimal_places=0)
    a_pur_min = models.CharField(db_column='A_PUR_MIN', max_length=60)
    a_pur_minf = models.CharField(db_column='A_PUR_MINF', max_length=10)
    a_pur_max = models.CharField(db_column='A_PUR_MAX', max_length=60)
    a_pur_maxf = models.CharField(db_column='A_PUR_MAXF', max_length=10)
    a_pur_mnth = models.DecimalField(db_column='A_PUR_MNTH', max_digits=6, decimal_places=1)
    a_pur_wait = models.DecimalField(db_column='A_PUR_WAIT', max_digits=4, decimal_places=0)
    a_pur_calc = models.TextField(db_column='A_PUR_CALC', blank=True, null=True)
    a_pur_rms = models.BooleanField(db_column='A_PUR_RMS')
    nodropship = models.BooleanField(db_column='NODROPSHIP')
    cto_prompt = models.DecimalField(db_column='CTO_PROMPT', max_digits=1, decimal_places=0)
    fixed_cost = models.BooleanField(db_column='FIXED_COST')
    adj_inven = models.CharField(db_column='ADJ_INVEN', max_length=24)
    autoserial = models.BooleanField(db_column='AUTOSERIAL')
    def_to_ser = models.BooleanField(db_column='DEF_TO_SER')
    def_to_pri = models.BooleanField(db_column='DEF_TO_PRI')
    value = models.DecimalField(db_column='VALUE', max_digits=14, decimal_places=2)
    jobstg_id = models.CharField(db_column='JOBSTG_ID', max_length=15)
    def_type = models.CharField(db_column='DEF_TYPE', max_length=35)
    ent_task = models.BooleanField(db_column='ENT_TASK')
    origin_category = models.ForeignObject(Inventre, models.SET_NULL, from_fields=['tree_id'], to_fields=['tree_id'],
                                           related_name='origin_products')

    class Meta:
        managed = False
        db_table = 'INVENTRY'


class Incompdet(models.Model):
    incompdet_guid = models.CharField(db_column='INCOMPDET_GUID', primary_key=True, max_length=36)
    recno5 = models.IntegerField(db_column='RECNO5')
    category = models.CharField(db_column='CATEGORY', max_length=24)
    id = models.CharField(db_column='ID', max_length=24)
    comp_id = models.CharField(db_column='COMP_ID', max_length=24)
    quan = models.DecimalField(db_column='QUAN', max_digits=22, decimal_places=6)
    unit_meas = models.CharField(db_column='UNIT_MEAS', max_length=10)
    u_cost = models.DecimalField(db_column='U_COST', max_digits=22, decimal_places=6)
    int_note = models.TextField(db_column='INT_NOTE', blank=True, null=True)
    autoid = models.CharField(db_column='AUTOID', max_length=16)
    origin_product = models.ForeignObject(Inventry, models.SET_NULL, from_fields=['comp_id'], to_fields=['id'],
                                          related_name='origin_components_detail')
    origin_product_as_component = models.ForeignObject(Inventry, models.SET_NULL, from_fields=['id'], to_fields=['id'],
                                                       related_name='origin_components_detail_as_product')


    class Meta:
        managed = False
        db_table = 'INCOMPDET'


class Invendet(models.Model):
    invendet_guid = models.CharField(db_column='INVENDET_GUID', primary_key=True, max_length=36)
    recno5 = models.IntegerField(db_column='RECNO5')
    id = models.CharField(db_column='ID', max_length=24)
    quan = models.DecimalField(db_column='QUAN', max_digits=22, decimal_places=6)
    comp_id = models.CharField(db_column='COMP_ID', max_length=24)
    unit_meas = models.CharField(db_column='UNIT_MEAS', max_length=10)
    u_cost = models.DecimalField(db_column='U_COST', max_digits=22, decimal_places=6)
    category = models.CharField(db_column='CATEGORY', max_length=24)
    allownone = models.BooleanField(db_column='ALLOWNONE')
    print = models.BooleanField(db_column='PRINT')
    print_quan = models.BooleanField(db_column='PRINT_QUAN')
    print_uom = models.BooleanField(db_column='PRINT_UOM')
    int_note = models.TextField(db_column='INT_NOTE', blank=True, null=True)
    autoid = models.CharField(db_column='AUTOID', max_length=16)
    origin_product = models.ForeignObject(Inventry, models.SET_NULL, from_fields=['id'], to_fields=['id'],
                                          related_name='origin_components')

    class Meta:
        managed = False
        db_table = 'INVENDET'
